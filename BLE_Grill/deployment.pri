# This file was generated by an application wizard of Qt Creator.
# The code below handles deployment to Android and Maemo, aswell as copying
# of the application data to shadow build directories on desktop.
# It is recommended not to modify this file, since newer versions of Qt Creator
# may offer an updated version of it.

defineTest(qtcAddDeployment) {
for(deploymentfolder, DEPLOYMENTFOLDERS) {
    item = item$${deploymentfolder}
    greaterThan(QT_MAJOR_VERSION, 4) {
        itemsources = $${item}.files
    } else {
        itemsources = $${item}.sources
    }
    $$itemsources = $$eval($${deploymentfolder}.source)
    itempath = $${item}.path
    $$itempath= $$eval($${deploymentfolder}.target)
    export($$itemsources)
    export($$itempath)
    DEPLOYMENT += $$item
}

MAINPROFILEPWD = $$PWD

android-no-sdk {
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        item = item$${deploymentfolder}
        itemfiles = $${item}.files
        $$itemfiles = $$eval($${deploymentfolder}.source)
        itempath = $${item}.path
        $$itempath = /data/user/qt/$$eval($${deploymentfolder}.target)
        export($$itemfiles)
        export($$itempath)
        INSTALLS += $$item
    }

    target.path = /data/user/qt

    export(target.path)
    INSTALLS += target
} else:android {
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        item = item$${deploymentfolder}
        itemfiles = $${item}.files
        $$itemfiles = $$eval($${deploymentfolder}.source)
        itempath = $${item}.path
        $$itempath = /assets/$$eval($${deploymentfolder}.target)
        export($$itemfiles)
        export($$itempath)
        INSTALLS += $$item
    }

    x86 {
        target.path = /libs/x86
    } else: armeabi-v7a {
        target.path = /libs/armeabi-v7a
    } else {
        target.path = /libs/armeabi
    }

    export(target.path)
    INSTALLS += target
} else:win32 {
    copyCommand =
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        source = $$MAINPROFILEPWD/$$eval($${deploymentfolder}.source)
        source = $$replace(source, /, \\)
        sourcePathSegments = $$split(source, \\)
        target = $$OUT_PWD/$$eval($${deploymentfolder}.target)/$$last(sourcePathSegments)
        target = $$replace(target, /, \\)
        target ~= s,\\\\\\.?\\\\,\\,
        !isEqual(source,$$target) {
            !isEmpty(copyCommand):copyCommand += &&
            isEqual(QMAKE_DIR_SEP, \\) {
                copyCommand += $(COPY_DIR) \"$$source\" \"$$target\"
            } else {
                source = $$replace(source, \\\\, /)
                target = $$OUT_PWD/$$eval($${deploymentfolder}.target)
                target = $$replace(target, \\\\, /)
                copyCommand += test -d \"$$target\" || mkdir -p \"$$target\" && cp -r \"$$source\" \"$$target\"
            }
        }
    }
    !isEmpty(copyCommand) {
        copyCommand = @echo Copying application data... && $$copyCommand
        copydeploymentfolders.commands = $$copyCommand
        first.depends = $(first) copydeploymentfolders
        export(first.depends)
        export(copydeploymentfolders.commands)
        QMAKE_EXTRA_TARGETS += first copydeploymentfolders
    }
} else:ios {
    copyCommand =
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        source = $$MAINPROFILEPWD/$$eval($${deploymentfolder}.source)
        source = $$replace(source, \\\\, /)
        target = $CODESIGNING_FOLDER_PATH/$$eval($${deploymentfolder}.target)
        target = $$replace(target, \\\\, /)
        sourcePathSegments = $$split(source, /)
        targetFullPath = $$target/$$last(sourcePathSegments)
        targetFullPath ~= s,/\\.?/,/,
        !isEqual(source,$$targetFullPath) {
            !isEmpty(copyCommand):copyCommand += &&
            copyCommand += mkdir -p \"$$target\"
            copyCommand += && cp -r \"$$source\" \"$$target\"
        }
    }
    !isEmpty(copyCommand) {
        copyCommand = echo Copying application data... && $$copyCommand
        !isEmpty(QMAKE_POST_LINK): QMAKE_POST_LINK += ";"
        QMAKE_POST_LINK += "$$copyCommand"
        export(QMAKE_POST_LINK)
    }
} else:unix {
    maemo5 {
        desktopfile.files = $${TARGET}.desktop
        desktopfile.path = /usr/share/applications/hildon
        icon.files = $${TARGET}64.png
        icon.path = /usr/share/icons/hicolor/64x64/apps
    } else:!isEmpty(MEEGO_VERSION_MAJOR) {
        desktopfile.files = $${TARGET}_harmattan.desktop
        desktopfile.path = /usr/share/applications
        icon.files = $${TARGET}80.png
        icon.path = /usr/share/icons/hicolor/80x80/apps
    } else { # Assumed to be a Desktop Unix
        copyCommand =
        for(deploymentfolder, DEPLOYMENTFOLDERS) {
            source = $$MAINPROFILEPWD/$$eval($${deploymentfolder}.source)
            source = $$replace(source, \\\\, /)
            macx {
                target = $$OUT_PWD/$${TARGET}.app/Contents/Resources/$$eval($${deploymentfolder}.target)
            } else {
                target = $$OUT_PWD/$$eval($${deploymentfolder}.target)
            }
            target = $$replace(target, \\\\, /)
            sourcePathSegments = $$split(source, /)
            targetFullPath = $$target/$$last(sourcePathSegments)
            targetFullPath ~= s,/\\.?/,/,
            !isEqual(source,$$targetFullPath) {
                !isEmpty(copyCommand):copyCommand += &&
                copyCommand += $(MKDIR) \"$$target\"
                copyCommand += && $(COPY_DIR) \"$$source\" \"$$target\"
            }
        }
        !isEmpty(copyCommand) {
            copyCommand = @echo Copying application data... && $$copyCommand
            copydeploymentfolders.commands = $$copyCommand
            first.depends = $(first) copydeploymentfolders
            export(first.depends)
            export(copydeploymentfolders.commands)
            QMAKE_EXTRA_TARGETS += first copydeploymentfolders
        }
    }
    !isEmpty(target.path) {
        installPrefix = $${target.path}
    } else {
        installPrefix = /opt/$${TARGET}
    }
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        item = item$${deploymentfolder}
        itemfiles = $${item}.files
        $$itemfiles = $$eval($${deploymentfolder}.source)
        itempath = $${item}.path
        $$itempath = $${installPrefix}/$$eval($${deploymentfolder}.target)
        export($$itemfiles)
        export($$itempath)
        INSTALLS += $$item
    }

    !isEmpty(desktopfile.path) {
        export(icon.files)
        export(icon.path)
        export(desktopfile.files)
        export(desktopfile.path)
        INSTALLS += icon desktopfile
    }

    isEmpty(target.path) {
        target.path = $${installPrefix}/bin
        export(target.path)
    }
    INSTALLS += target
}

export (ICON)
export (INSTALLS)
export (DEPLOYMENT)
export (LIBS)
export (QMAKE_EXTRA_TARGETS)
}

HEADERS += \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/aci.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/aci_cmds.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/aci_evts.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/aci_protocol_defines.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/aci_queue.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/aci_setup.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/acilib.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/acilib_defs.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/acilib_if.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/acilib_types.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/ble_assert.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/boards.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/dtm.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/hal_aci_tl.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/hal_platform.h \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/lib_aci.h \
    $$PWD/BLE/examples/ble_A_Hello_World_Program/services.h \
    $$PWD/BLE/examples/ble_A_Hello_World_Program/services_lock.h \
    $$PWD/BLE/examples/ble_A_Hello_World_Program/uart_over_ble.h \
    $$PWD/BLE/examples/ble_bandwidth_test/services.h \
    $$PWD/BLE/examples/ble_bandwidth_test/services_lock.h \
    $$PWD/BLE/examples/ble_broadcast/services.h \
    $$PWD/BLE/examples/ble_broadcast/services_lock.h \
    $$PWD/BLE/examples/ble_heart_rate_template/battery.h \
    $$PWD/BLE/examples/ble_heart_rate_template/heart_rate.h \
    $$PWD/BLE/examples/ble_heart_rate_template/services.h \
    $$PWD/BLE/examples/ble_heart_rate_template/services_lock.h \
    $$PWD/BLE/examples/ble_heart_rate_template_with_battery_service/battery.h \
    $$PWD/BLE/examples/ble_heart_rate_template_with_battery_service/heart_rate.h \
    $$PWD/BLE/examples/ble_heart_rate_template_with_battery_service/hrm_definitions.h \
    $$PWD/BLE/examples/ble_heart_rate_template_with_battery_service/lib_battery_level.h \
    $$PWD/BLE/examples/ble_heart_rate_template_with_battery_service/services.h \
    $$PWD/BLE/examples/ble_heart_rate_template_with_battery_service/services_lock.h \
    $$PWD/BLE/examples/ble_heart_rate_template_with_simulated_battery_service/battery.h \
    $$PWD/BLE/examples/ble_heart_rate_template_with_simulated_battery_service/heart_rate.h \
    $$PWD/BLE/examples/ble_heart_rate_template_with_simulated_battery_service/lib_battery_level.h \
    $$PWD/BLE/examples/ble_heart_rate_template_with_simulated_battery_service/services.h \
    $$PWD/BLE/examples/ble_heart_rate_template_with_simulated_battery_service/services_lock.h \
    $$PWD/BLE/examples/ble_HID_keyboard_2_bonds_template/services.h \
    $$PWD/BLE/examples/ble_HID_keyboard_2_bonds_template/services_lock.h \
    $$PWD/BLE/examples/ble_HID_keyboard_template/services.h \
    $$PWD/BLE/examples/ble_HID_keyboard_template/services_lock.h \
    $$PWD/BLE/examples/ble_HID_template/services.h \
    $$PWD/BLE/examples/ble_HID_template/services_lock.h \
    $$PWD/BLE/examples/ble_HID_template_HID_HRM/services.h \
    $$PWD/BLE/examples/ble_HID_template_HID_HRM/services_lock.h \
    $$PWD/BLE/examples/ble_modify_setup_data/services.h \
    $$PWD/BLE/examples/ble_modify_setup_data/services_lock.h \
    $$PWD/BLE/examples/ble_modify_setup_data/services_ota_with_pipe.h \
    $$PWD/BLE/examples/ble_modify_setup_data/services_ota_with_pipe_ota_removed.h \
    $$PWD/BLE/examples/ble_my_project_template/services.h \
    $$PWD/BLE/examples/ble_my_project_template/services_lock.h \
    $$PWD/BLE/examples/ble_proximity_template/alert_level_characteristic.h \
    $$PWD/BLE/examples/ble_proximity_template/immediate_alert.h \
    $$PWD/BLE/examples/ble_proximity_template/link_loss.h \
    $$PWD/BLE/examples/ble_proximity_template/services.h \
    $$PWD/BLE/examples/ble_proximity_template/services_lock.h \
    $$PWD/BLE/examples/ble_temperature_template/date_time.h \
    $$PWD/BLE/examples/ble_temperature_template/health_thermometer.h \
    $$PWD/BLE/examples/ble_temperature_template/services.h \
    $$PWD/BLE/examples/ble_temperature_template/services_lock.h \
    $$PWD/BLE/examples/ble_temperature_template/timer1.h \
    $$PWD/BLE/examples/ble_uart_project_template/services.h \
    $$PWD/BLE/examples/ble_uart_project_template/services_lock.h \
    $$PWD/BLE/examples/ble_uart_project_template/uart_over_ble.h \
    $$PWD/BLE/aci.h \
    $$PWD/BLE/aci_cmds.h \
    $$PWD/BLE/aci_evts.h \
    $$PWD/BLE/aci_protocol_defines.h \
    $$PWD/BLE/aci_queue.h \
    $$PWD/BLE/aci_setup.h \
    $$PWD/BLE/acilib.h \
    $$PWD/BLE/acilib_defs.h \
    $$PWD/BLE/acilib_if.h \
    $$PWD/BLE/acilib_types.h \
    $$PWD/BLE/ble_assert.h \
    $$PWD/BLE/boards.h \
    $$PWD/BLE/dtm.h \
    $$PWD/BLE/hal_aci_tl.h \
    $$PWD/BLE/hal_platform.h \
    $$PWD/BLE/lib_aci.h \
    $$PWD/BLEGrill_nRF8001/BLEGrill_nRF8001.h \
    $$PWD/BLEGrill_nRF8001/services.h \
    $$PWD/BLE_Grill.ino \
    $$PWD/tempsensor.h \
    $$PWD/C:/Program Files (x86)/Arduino/libraries/TempSensor/TempSensor.h \
    $$PWD/libs/EEPROM/EEPROM.h \
    $$PWD/libs/Esplora/Esplora.h \
    $$PWD/libs/Ethernet/utility/socket.h \
    $$PWD/libs/Ethernet/utility/w5100.h \
    $$PWD/libs/Ethernet/Dhcp.h \
    $$PWD/libs/Ethernet/Dns.h \
    $$PWD/libs/Ethernet/Ethernet.h \
    $$PWD/libs/Ethernet/EthernetClient.h \
    $$PWD/libs/Ethernet/EthernetServer.h \
    $$PWD/libs/Ethernet/EthernetUdp.h \
    $$PWD/libs/Ethernet/util.h \
    $$PWD/libs/Firmata/Boards.h \
    $$PWD/libs/Firmata/Firmata.h \
    $$PWD/libs/GSM/GSM.h \
    $$PWD/libs/GSM/GSM3CircularBuffer.h \
    $$PWD/libs/GSM/GSM3MobileAccessProvider.h \
    $$PWD/libs/GSM/GSM3MobileCellManagement.h \
    $$PWD/libs/GSM/GSM3MobileClientProvider.h \
    $$PWD/libs/GSM/GSM3MobileClientService.h \
    $$PWD/libs/GSM/GSM3MobileDataNetworkProvider.h \
    $$PWD/libs/GSM/GSM3MobileMockupProvider.h \
    $$PWD/libs/GSM/GSM3MobileNetworkProvider.h \
    $$PWD/libs/GSM/GSM3MobileNetworkRegistry.h \
    $$PWD/libs/GSM/GSM3MobileServerProvider.h \
    $$PWD/libs/GSM/GSM3MobileServerService.h \
    $$PWD/libs/GSM/GSM3MobileSMSProvider.h \
    $$PWD/libs/GSM/GSM3MobileVoiceProvider.h \
    $$PWD/libs/GSM/GSM3ShieldV1.h \
    $$PWD/libs/GSM/GSM3ShieldV1AccessProvider.h \
    $$PWD/libs/GSM/GSM3ShieldV1BandManagement.h \
    $$PWD/libs/GSM/GSM3ShieldV1BaseProvider.h \
    $$PWD/libs/GSM/GSM3ShieldV1CellManagement.h \
    $$PWD/libs/GSM/GSM3ShieldV1ClientProvider.h \
    $$PWD/libs/GSM/GSM3ShieldV1DataNetworkProvider.h \
    $$PWD/libs/GSM/GSM3ShieldV1DirectModemProvider.h \
    $$PWD/libs/GSM/GSM3ShieldV1ModemCore.h \
    $$PWD/libs/GSM/GSM3ShieldV1ModemVerification.h \
    $$PWD/libs/GSM/GSM3ShieldV1MultiClientProvider.h \
    $$PWD/libs/GSM/GSM3ShieldV1MultiServerProvider.h \
    $$PWD/libs/GSM/GSM3ShieldV1PinManagement.h \
    $$PWD/libs/GSM/GSM3ShieldV1ScanNetworks.h \
    $$PWD/libs/GSM/GSM3ShieldV1ServerProvider.h \
    $$PWD/libs/GSM/GSM3ShieldV1SMSProvider.h \
    $$PWD/libs/GSM/GSM3ShieldV1VoiceProvider.h \
    $$PWD/libs/GSM/GSM3SMSService.h \
    $$PWD/libs/GSM/GSM3SoftSerial.h \
    $$PWD/libs/GSM/GSM3VoiceCallService.h \
    $$PWD/libs/LiquidCrystal/LiquidCrystal.h \
    $$PWD/libs/Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h \
    $$PWD/libs/Robot_Control/utility/Adafruit_GFX.h \
    $$PWD/libs/Robot_Control/utility/RobotTextManager.h \
    $$PWD/libs/Robot_Control/utility/scripts_Hello_User.h \
    $$PWD/libs/Robot_Control/utility/VirtualKeyboard.h \
    $$PWD/libs/Robot_Control/Arduino_LCD.h \
    $$PWD/libs/Robot_Control/ArduinoRobot.h \
    $$PWD/libs/Robot_Control/Compass.h \
    $$PWD/libs/Robot_Control/EasyTransfer2.h \
    $$PWD/libs/Robot_Control/EEPROM_I2C.h \
    $$PWD/libs/Robot_Control/Fat16.h \
    $$PWD/libs/Robot_Control/Fat16Config.h \
    $$PWD/libs/Robot_Control/Fat16mainpage.h \
    $$PWD/libs/Robot_Control/Fat16util.h \
    $$PWD/libs/Robot_Control/FatStructs.h \
    $$PWD/libs/Robot_Control/Multiplexer.h \
    $$PWD/libs/Robot_Control/SdCard.h \
    $$PWD/libs/Robot_Control/SdInfo.h \
    $$PWD/libs/Robot_Control/Squawk.h \
    $$PWD/libs/Robot_Control/SquawkSD.h \
    $$PWD/libs/Robot_Motor/ArduinoRobotMotorBoard.h \
    $$PWD/libs/Robot_Motor/EasyTransfer2.h \
    $$PWD/libs/Robot_Motor/LineFollow.h \
    $$PWD/libs/Robot_Motor/Multiplexer.h \
    $$PWD/libs/RobotIRremote/IRremote.h \
    $$PWD/libs/RobotIRremote/IRremoteInt.h \
    $$PWD/libs/RobotIRremote/IRremoteTools.h \
    $$PWD/libs/SD/utility/FatStructs.h \
    $$PWD/libs/SD/utility/Sd2Card.h \
    $$PWD/libs/SD/utility/Sd2PinMap.h \
    $$PWD/libs/SD/utility/SdFat.h \
    $$PWD/libs/SD/utility/SdFatmainpage.h \
    $$PWD/libs/SD/utility/SdFatUtil.h \
    $$PWD/libs/SD/utility/SdInfo.h \
    $$PWD/libs/SD/SD.h \
    $$PWD/libs/Servo/Servo.h \
    $$PWD/libs/SoftwareSerial/SoftwareSerial.h \
    $$PWD/libs/SPI/SPI.h \
    $$PWD/libs/Stepper/Stepper.h \
    $$PWD/libs/TempSensor/TempSensor.h \
    $$PWD/libs/TFT/utility/Adafruit_GFX.h \
    $$PWD/libs/TFT/utility/Adafruit_ST7735.h \
    $$PWD/libs/TFT/utility/PImage.h \
    $$PWD/libs/TFT/TFT.h \
    $$PWD/libs/Timer/Event.h \
    $$PWD/libs/Timer/Timer.h \
    $$PWD/libs/WiFi/utility/debug.h \
    $$PWD/libs/WiFi/utility/server_drv.h \
    $$PWD/libs/WiFi/utility/socket.h \
    $$PWD/libs/WiFi/utility/spi_drv.h \
    $$PWD/libs/WiFi/utility/wifi_drv.h \
    $$PWD/libs/WiFi/utility/wifi_spi.h \
    $$PWD/libs/WiFi/utility/wl_definitions.h \
    $$PWD/libs/WiFi/utility/wl_types.h \
    $$PWD/libs/WiFi/WiFi.h \
    $$PWD/libs/WiFi/WiFiClient.h \
    $$PWD/libs/WiFi/WiFiServer.h \
    $$PWD/libs/WiFi/WiFiUdp.h \
    $$PWD/libs/Wire/utility/twi.h \
    $$PWD/libs/Wire/Wire.h \
    $$PWD/TempSensor.h \
    $$PWD/constant.h \
    $$PWD/DeviceSettings.h \
    $$PWD/AlarmHandle.h \
    $$PWD/BLEGrill.h

SOURCES += \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/aci_queue.cpp \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/aci_setup.cpp \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/acilib.cpp \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/hal_aci_tl.cpp \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLE/lib_aci.cpp \
    $$PWD/BLE/examples/ble_heart_rate_template/battery.cpp \
    $$PWD/BLE/examples/ble_heart_rate_template/heart_rate.cpp \
    $$PWD/BLE/examples/ble_heart_rate_template_with_battery_service/battery.cpp \
    $$PWD/BLE/examples/ble_heart_rate_template_with_battery_service/heart_rate.cpp \
    $$PWD/BLE/examples/ble_heart_rate_template_with_battery_service/lib_battery_level.cpp \
    $$PWD/BLE/examples/ble_heart_rate_template_with_simulated_battery_service/battery.cpp \
    $$PWD/BLE/examples/ble_heart_rate_template_with_simulated_battery_service/heart_rate.cpp \
    $$PWD/BLE/examples/ble_proximity_template/immediate_alert.cpp \
    $$PWD/BLE/examples/ble_proximity_template/link_loss.cpp \
    $$PWD/BLE/examples/ble_temperature_template/health_thermometer.cpp \
    $$PWD/BLE/examples/ble_temperature_template/timer1.cpp \
    $$PWD/BLE/aci_queue.cpp \
    $$PWD/BLE/aci_setup.cpp \
    $$PWD/BLE/acilib.cpp \
    $$PWD/BLE/hal_aci_tl.cpp \
    $$PWD/BLE/lib_aci.cpp \
    $$PWD/BLEGrill_nRF8001/BLEGrill_nRF8001.cpp \
    $$PWD/BLE/examples/ble_heart_rate_template_with_simulated_battery_service/lib_battery_level.c \
    $$PWD/C:/Program Files (x86)/Arduino/libraries/TempSensor/TempSensor.cpp \
    $$PWD/libs/EEPROM/EEPROM.cpp \
    $$PWD/libs/Esplora/Esplora.cpp \
    $$PWD/libs/Ethernet/utility/socket.cpp \
    $$PWD/libs/Ethernet/utility/w5100.cpp \
    $$PWD/libs/Ethernet/Dhcp.cpp \
    $$PWD/libs/Ethernet/Dns.cpp \
    $$PWD/libs/Ethernet/Ethernet.cpp \
    $$PWD/libs/Ethernet/EthernetClient.cpp \
    $$PWD/libs/Ethernet/EthernetServer.cpp \
    $$PWD/libs/Ethernet/EthernetUdp.cpp \
    $$PWD/libs/Firmata/Firmata.cpp \
    $$PWD/libs/GSM/GSM3CircularBuffer.cpp \
    $$PWD/libs/GSM/GSM3MobileAccessProvider.cpp \
    $$PWD/libs/GSM/GSM3MobileCellManagement.cpp \
    $$PWD/libs/GSM/GSM3MobileClientProvider.cpp \
    $$PWD/libs/GSM/GSM3MobileClientService.cpp \
    $$PWD/libs/GSM/GSM3MobileDataNetworkProvider.cpp \
    $$PWD/libs/GSM/GSM3MobileMockupProvider.cpp \
    $$PWD/libs/GSM/GSM3MobileNetworkProvider.cpp \
    $$PWD/libs/GSM/GSM3MobileNetworkRegistry.cpp \
    $$PWD/libs/GSM/GSM3MobileServerProvider.cpp \
    $$PWD/libs/GSM/GSM3MobileServerService.cpp \
    $$PWD/libs/GSM/GSM3MobileSMSProvider.cpp \
    $$PWD/libs/GSM/GSM3MobileVoiceProvider.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1AccessProvider.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1BandManagement.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1BaseProvider.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1CellManagement.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1ClientProvider.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1DataNetworkProvider.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1DirectModemProvider.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1ModemCore.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1ModemVerification.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1MultiClientProvider.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1MultiServerProvider.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1PinManagement.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1ScanNetworks.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1ServerProvider.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1SMSProvider.cpp \
    $$PWD/libs/GSM/GSM3ShieldV1VoiceProvider.cpp \
    $$PWD/libs/GSM/GSM3SMSService.cpp \
    $$PWD/libs/GSM/GSM3SoftSerial.cpp \
    $$PWD/libs/GSM/GSM3VoiceCallService.cpp \
    $$PWD/libs/LiquidCrystal/LiquidCrystal.cpp \
    $$PWD/libs/Robot_Control/utility/Adafruit_GFX.cpp \
    $$PWD/libs/Robot_Control/utility/RobotTextManager.cpp \
    $$PWD/libs/Robot_Control/utility/VirtualKeyboard.cpp \
    $$PWD/libs/Robot_Control/Arduino_LCD.cpp \
    $$PWD/libs/Robot_Control/ArduinoRobot.cpp \
    $$PWD/libs/Robot_Control/communication.cpp \
    $$PWD/libs/Robot_Control/Compass.cpp \
    $$PWD/libs/Robot_Control/EasyTransfer2.cpp \
    $$PWD/libs/Robot_Control/EEPROM_I2C.cpp \
    $$PWD/libs/Robot_Control/Fat16.cpp \
    $$PWD/libs/Robot_Control/helper.cpp \
    $$PWD/libs/Robot_Control/information.cpp \
    $$PWD/libs/Robot_Control/keyboard.cpp \
    $$PWD/libs/Robot_Control/lcd.cpp \
    $$PWD/libs/Robot_Control/Melody.cpp \
    $$PWD/libs/Robot_Control/Motors.cpp \
    $$PWD/libs/Robot_Control/Multiplexer.cpp \
    $$PWD/libs/Robot_Control/RobotSdCard.cpp \
    $$PWD/libs/Robot_Control/SdCard.cpp \
    $$PWD/libs/Robot_Control/Sensors.cpp \
    $$PWD/libs/Robot_Control/Squawk.cpp \
    $$PWD/libs/Robot_Control/SquawkSD.cpp \
    $$PWD/libs/Robot_Motor/ArduinoRobotMotorBoard.cpp \
    $$PWD/libs/Robot_Motor/EasyTransfer2.cpp \
    $$PWD/libs/Robot_Motor/lineFollow.cpp \
    $$PWD/libs/Robot_Motor/Multiplexer.cpp \
    $$PWD/libs/RobotIRremote/IRremote.cpp \
    $$PWD/libs/RobotIRremote/IRremoteTools.cpp \
    $$PWD/libs/SD/utility/Sd2Card.cpp \
    $$PWD/libs/SD/utility/SdFile.cpp \
    $$PWD/libs/SD/utility/SdVolume.cpp \
    $$PWD/libs/SD/File.cpp \
    $$PWD/libs/SD/SD.cpp \
    $$PWD/libs/Servo/Servo.cpp \
    $$PWD/libs/SoftwareSerial/SoftwareSerial.cpp \
    $$PWD/libs/SPI/SPI.cpp \
    $$PWD/libs/Stepper/Stepper.cpp \
    $$PWD/libs/TempSensor/TempSensor.cpp \
    $$PWD/libs/TFT/utility/Adafruit_GFX.cpp \
    $$PWD/libs/TFT/utility/Adafruit_ST7735.cpp \
    $$PWD/libs/TFT/TFT.cpp \
    $$PWD/libs/Timer/Event.cpp \
    $$PWD/libs/Timer/Timer.cpp \
    $$PWD/libs/WiFi/utility/server_drv.cpp \
    $$PWD/libs/WiFi/utility/spi_drv.cpp \
    $$PWD/libs/WiFi/utility/wifi_drv.cpp \
    $$PWD/libs/WiFi/WiFi.cpp \
    $$PWD/libs/WiFi/WiFiClient.cpp \
    $$PWD/libs/WiFi/WiFiServer.cpp \
    $$PWD/libs/WiFi/WiFiUdp.cpp \
    $$PWD/libs/Wire/Wire.cpp \
    $$PWD/libs/Robot_Control/glcdfont.c \
    $$PWD/libs/TFT/utility/glcdfont.c \
    $$PWD/libs/WiFi/utility/socket.c \
    $$PWD/libs/Wire/utility/twi.c \
    $$PWD/TempSensor.cpp \
    $$PWD/DeviceSettings.cpp \
    $$PWD/AlarmHandle.cpp \
    $$PWD/BLEGrill.cpp

DISTFILES += \
    $$PWD/D:/Benutzerdaten/Christian/CloudStation/Eigene Dokumente/Arduino/libraries/BLEGrill_nRF8001/BLEGrill_nRF8001.xml

